structure A = Absyn
structure S = Symbol

(* [these functions and similar ones may be convenient
 * for the creation of abstract syntax trees] *)

datatype lvaluePartSpec = Field of S.symbol
                        | Subscript of A.exp

fun makeLvaluePartSpec (v, pos, l::r) =
  (case l
    of Field idsym =>
       makeLvaluePartSpec (A.FieldVar (v, idsym, pos), pos, r)
     | Subscript exp =>
       makeLvaluePartSpec (A.SubscriptVar (v, exp, pos), pos,r))
  | makeLvaluePartSpec (v, _, nil) = v

fun makeBinop (e1, bop, e2, p) =
    A.OpExp  { left = e1
             , oper = bop
             , right = e2
             , pos = p}

fun makeRecord (fs, t, p) =
    A.RecordExp { fields = fs
		, typ = t
		, pos = p }

fun makeAssign (v, e, p) =
    A.AssignExp { var = v
		, exp = e
		, pos = p } 

fun makeIf (et, en, el, p) =
    A.IfExp  { test = et
             , thn = en
             , els = el
             , pos = p}

fun makeWhile (et, wh, p) =
    A.WhileExp { test = et
	       , body = wh
	       , pos = p}

fun makeFor (v, l, h, prog, p) =
    A.ForExp { var = v
	     , escape = ref true
	     , lo = l
	     , hi = h
	     , body = prog
	     , pos = p}

fun makeLet (ds, b, p) =
    A.LetExp { decls = ds
	     , body = b
	     , pos = p }

fun makeSeq ([]) = A.SeqExp([])
		 | makeSeq  ((e, p) :: []) = e
				      | makeSeq (e :: r) = A.SeqExp(e :: r)

fun makeArray (t, sz, ini, p) =
    A.ArrayExp { typ = t
	   , size = sz
	   , init = ini
	   , pos = p }


fun makeCall(f, ars, p) =
    A.CallExp { func = f
	      , args = ars
	      , pos = p } 

fun makeVarDec (idsym, ty, e, p) =
    { name = idsym
    , escape = ref true
    , typ = ty
    , init = e
    , pos = p} : A.vardecldata

fun makeTypeDec (idsym, t, p) =
    { name = idsym
    , ty = t
    , pos = p} : A.tydecldata

fun makeField (idsym, t, p) =
    { name = idsym
    , escape = ref true
    , typ = t
    , pos = p } : A.fielddata

fun makeFunDec (idsym, ps, rty, e, p) =
             { name = idsym
             , params = ps
             , result = rty
             , body = e
             , pos = p} : A.fundecldata

fun makeFunTypeDec ((A.FunctionDec (d1 :: d1s)) :: (A.FunctionDec (d2 :: d2s)) :: ds) = (A.FunctionDec ([d1, d2] @ d1s @ d2s) :: ds)
   | makeFunTypeDec ((A.TypeDec (d1 :: d1s)) :: (A.TypeDec (d2 :: d2s)) :: ds) = (A.TypeDec ([d1, d2] @ d1s @ d2s) :: ds)
   | makeFunTypeDec d1 = d1


%%
%term
    EOF
  | ID of string
  | INT of int | STRING of string
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK
  | LBRACE | RBRACE | DOT
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF
  | BREAK | NIL
  | FUNCTION | VAR | TYPE

(* [add missing nonterminals; in second phase: add semantic values] *)

%nonterm program of A.exp 
       | exp of A.exp 
       | idexp of (S.symbol * A.exp * pos) list
       | expseq of (A.exp * pos) list
       | expssemi of (A.exp * pos) list
       | expscomma of (A.exp * pos) list
       | decs of A.decl list
       | dec of A.decl
       | tydec of A.tydecldata
       | vardec of A.vardecldata
       | fundec of A.fundecldata
       | ty of A.ty
       | tyfields of A.fielddata list
       | tyfields' of A.fielddata list
       | lvalue of A.var
       | lvalue' of lvaluePartSpec list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION
         VAR TYPE ARRAY IF THEN ELSE DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%change EQ -> ASSIGN | ASSIGN -> EQ | SEMICOLON ELSE -> ELSE |   -> IN INT END | EQ EQ -> EQ

(* [specify precedence/associativity, least tight binding first] *)

%nonassoc   FUNCTION VAR TYPE THEN DO OF ASSIGN
%right      ELSE
%left OR
%left AND
%left EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

(* [..more tokens & levels..] *)

%%

(* Top level constructs *)

program: exp							(exp)

exp: NIL								(A.NilExp)
   | INT								(A.IntExp (INT))
   | STRING								(A.StringExp (STRING, STRINGleft))
   | lvalue								(A.VarExp(lvalue))
   | LPAREN RPAREN						(A.SeqExp[])
   | exp OR exp			 				(makeIf(exp1, A.IntExp 1, SOME exp2, ORleft))
   | exp AND exp			 			(makeIf (exp1, exp2, SOME (A.IntExp 0), ANDleft))
   | exp EQ exp 			 			(makeBinop (exp1, A.EqOp, exp2, EQleft))
   | exp NEQ exp 			 			(makeBinop (exp1, A.NeqOp, exp2, NEQleft))
   | exp GT exp 			 			(makeBinop (exp1, A.GtOp, exp2, GTleft))
   | exp LT exp 			 			(makeBinop (exp1, A.LtOp, exp2, LTleft))
   | exp GE exp 			  			(makeBinop (exp1, A.GeOp, exp2, GEleft))
   | exp LE exp  						(makeBinop (exp1, A.LeOp, exp2, LEleft))
   | exp PLUS exp  						(makeBinop (exp1, A.PlusOp, exp2, PLUSleft))
   | exp MINUS exp  					(makeBinop (exp1, A.MinusOp, exp2, MINUSleft))
   | exp TIMES exp  					(makeBinop (exp1, A.TimesOp, exp2, TIMESleft))
   | exp DIVIDE exp  					(makeBinop (exp1, A.DivideOp, exp2, DIVIDEleft))
   | MINUS exp  %prec UMINUS 			(makeBinop (A.IntExp 0, A.MinusOp, exp, MINUSleft))
   | IF exp THEN exp ELSE exp 			(makeIf (exp1, exp2, SOME exp3, IFleft))
   | IF exp THEN exp  					(makeIf (exp1, exp2, NONE, IFleft))
   | WHILE exp DO exp 					(makeWhile(exp1, exp2, WHILEleft))
   | FOR ID ASSIGN exp TO exp DO exp 	(makeFor(S.symbol(ID1), exp1, exp2, exp3, FORleft))
   | LET decs IN expseq END 			(makeLet(decs, makeSeq(expseq1), LETleft))
   | ID LPAREN RPAREN 					(makeCall(S.symbol(ID1), [], ID1left))
   | ID LPAREN expscomma RPAREN 		(makeCall(S.symbol(ID1), expscomma, ID1left))

   | ID LBRACE ID EQ exp idexp RBRACE	(makeRecord((S.symbol(ID2), exp1, ID2left) :: idexp, S.symbol(ID1), ID1left))
   | ID LBRACE RBRACE					(makeRecord([], S.symbol(ID1), ID1left))
   | ID LBRACK exp RBRACK OF exp 		(makeArray(S.symbol(ID1), exp1, exp2, ID1left))

   | lvalue ASSIGN exp					(makeAssign(lvalue1, exp1, lvalue1left))
   | LPAREN expssemi RPAREN				(makeSeq(expssemi))
   | BREAK								(A.BreakExp (BREAKleft))

    (* [..missing rules for exp..] *)

idexp:									([]) 
     | COMMA ID EQ exp idexp 			((S.symbol(ID1), exp1, ID1left) :: idexp)

expseq: 								([])
      | exp 							((exp1, exp1left) :: [])
      | exp SEMICOLON expseq 			((exp1, exp1left) :: expseq)

expssemi: exp 							((exp1, exp1left) :: [])
      | exp SEMICOLON expssemi 			((exp1, exp1left) :: expssemi)

expscomma: exp 							((exp1, exp1left) :: [])
      | exp COMMA expscomma 			((exp1, exp1left) :: expscomma)

decs:  									([])
    | dec decs 							(makeFunTypeDec(dec :: decs))

dec:  tydec 							(A.TypeDec(tydec :: []))
   | vardec 							(A.VarDec(vardec)) 
   | fundec 							(A.FunctionDec(fundec :: []))

tydec: TYPE ID EQ ty 					(makeTypeDec(S.symbol(ID1), ty, TYPEleft))


ty: ID 									(A.NameTy(S.symbol(ID1), ID1left))
  | LBRACE  tyfields RBRACE 			(A.RecordTy(tyfields))
  | ARRAY OF ID 						(A.ArrayTy(S.symbol(ID1), ARRAYleft))

tyfields:  								([]) 
	| ID COLON ID tyfields' 			(makeField(S.symbol(ID1), (S.symbol(ID2), ID2left), ID1left) :: tyfields')

tyfields': COMMA ID COLON ID tyfields' 	(makeField(S.symbol(ID1), (S.symbol(ID2), ID2left), COMMAleft) :: tyfields')
	 |  								([])

vardec: VAR ID ASSIGN exp 				(makeVarDec(S.symbol(ID), NONE, exp1, VARleft))
      | VAR ID COLON ID ASSIGN exp 		(makeVarDec(S.symbol(ID1), SOME (S.symbol(ID2), ID2left), exp1, VARleft))

fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp 			(makeFunDec(S.symbol(ID1), tyfields1, NONE, exp1, FUNCTIONleft))
      | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp 	(makeFunDec(S.symbol(ID1), tyfields1, SOME (S.symbol(ID2), ID2left), exp1, FUNCTIONleft))

lvalue: ID lvalue' (makeLvaluePartSpec 	(A.SimpleVar(S.symbol(ID1), ID1left),  ID1left, lvalue'))

lvalue': DOT ID lvalue' 				(Field (S.symbol(ID1)) :: lvalue')
       | LBRACK exp RBRACK lvalue' 		(Subscript exp1 :: lvalue')
       | 								([])

(* [..missing rules for missing nonterminals..] *)
